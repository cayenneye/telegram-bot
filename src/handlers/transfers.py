from aiogram import F, Router
from aiogram.enums import ChatType
from aiogram.filters import (
    Command,
    ExceptionTypeFilter,
    StateFilter,
    invert_f,
    or_f,
)
from aiogram.types import CallbackQuery, ErrorEvent, Message

from callback_data import TransferRollbackCallbackData
from exceptions import (
    InsufficientFundsForTransferError,
    InsufficientFundsForTransferRollbackError,
    TransactionDoesNotBelongToUserError,
    TransactionDoesNotExistError,
    TransferRollbackExpiredError,
)
from filters import transfer_operation_filter
from repositories import BalanceRepository
from services import BalanceNotifier
from views import (
    TransferExecutedView,
    reply_view,
)

router = Router(name=__name__)


@router.callback_query(
    TransferRollbackCallbackData.filter(),
    StateFilter('*'),
)
async def on_rollback_transfer(
        callback_query: CallbackQuery,
        callback_data: TransferRollbackCallbackData,
        balance_repository: BalanceRepository,
) -> None:
    try:
        await balance_repository.rollback_transfer(
            transfer_id=callback_data.transfer_id,
            user_id=callback_query.from_user.id,
        )
    except InsufficientFundsForTransferRollbackError:
        await callback_query.answer(
            text='‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞',
            show_alert=True,
        )
    except TransactionDoesNotBelongToUserError:
        await callback_query.answer(
            text='‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –ø–µ—Ä–µ–≤–æ–¥–∞',
            show_alert=True,
        )
    except TransferRollbackExpiredError:
        await callback_query.answer(
            text='‚ùå –ü–µ—Ä–µ–≤–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω—ë–Ω —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç',
            show_alert=True,
        )
    except TransactionDoesNotExistError:
        await callback_query.answer(
            text='‚ùå –ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω',
            show_alert=True,
        )
    else:
        await callback_query.message.delete_reply_markup()
        await callback_query.message.edit_text(
            text=f'{callback_query.message.text}\n\n<i>[–û—Ç–º–µ–Ω—ë–Ω]</i>'
        )


@router.error(ExceptionTypeFilter(InsufficientFundsForTransferError))
async def on_insufficient_funds_for_transfer_error(event: ErrorEvent) -> None:
    await event.update.message.reply(
        '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\n'
        'üí∏ –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å /work'
    )


@router.message(
    Command('send'),
    invert_f(transfer_operation_filter),
    F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}),
    StateFilter('*'),
)
async def on_transfer_operation_amount_invalid(
        message: Message,
) -> None:
    await message.reply(
        'üí≥ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥:\n'
        '<code>/send {—Å—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞} {–æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)}</code>'
    )


@router.message(
    Command('send'),
    F.from_user.id == F.reply_to_message.from_user.id,
    F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}),
    StateFilter('*'),
)
async def on_transfer_to_himself(message: Message) -> None:
    await message.reply('ü§® –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–∞–º–æ–º—É —Å–µ–±–µ')


@router.message(
    F.reply_to_message,
    or_f(
        Command('send'),
        F.text.lower().startswith('pay '),
        F.text.lower().startswith('–æ—Ç–ø—Ä–∞–≤–∏—Ç—å '),
        F.text.lower().startswith('send '),
    ),
    invert_f(F.reply_to_message.from_user.is_bot),
    F.from_user.id != F.reply_to_message.from_user.id,
    transfer_operation_filter,
    StateFilter('*'),
)
async def on_create_transfer_in_group_chat(
        message: Message,
        amount: int,
        description: str | None,
        balance_repository: BalanceRepository,
        balance_notifier: BalanceNotifier,
) -> None:
    sender_id = message.from_user.id
    recipient_id = message.reply_to_message.from_user.id

    description = description or f'Transfer from {message.from_user.full_name}'

    transfer = await balance_repository.create_transfer(
        sender_id=sender_id,
        recipient_id=recipient_id,
        amount=amount,
        description=description,
    )
    view = TransferExecutedView(transfer)
    await reply_view(message=message, view=view)
    await balance_notifier.send_transfer_notification(transfer)
