from collections.abc import Iterable
from uuid import UUID

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from callback_data import (
    InvertedSecretMessageDetailCallbackData,
    SecretMessageDeleteCallbackData,
    SecretMessageDetailCallbackData,
)
from models import (
    Contact,
    SecretMedia,
    SecretMediaType,
    SecretMessageTheme,
)
from views import InlineQueryView, View

__all__ = (
    'SecretMessageDetailInlineQueryView',
    'SecretMessageTextMissingInlineQueryView',
    'InvertedSecretMessageDetailInlineQueryView',
    'NotPremiumUserInlineQueryView',
    'TooLongSecretMessageTextInlineQueryView',
    'NoUserContactsInlineQueryView',
    'SecretMediaCreateContactListView',
    'SecretMediaCreateConfirmView',
    'SecretMediaDetailView',
    'SecretMediaForShareView',
    'SecretMediaCalledInGroupChatView',
    'UserSettingsCalledInGroupChatView',
    'SecretMessagePromptView',
    'SecretMessageNotificationView',
    'NoVisibleContactsInlineQueryView',
)


class InvertedSecretMessageDetailInlineQueryView(InlineQueryView):
    thumbnail_width = 100
    thumbnail_height = 100

    def __init__(
            self,
            query_id: str,
            contact: Contact,
            secret_message_id: UUID,
            secret_message_theme: SecretMessageTheme | None,
    ):
        self.__query_id = query_id
        self.__contact = contact
        self.__secret_message_id = secret_message_id
        self.__secret_message_theme = secret_message_theme

    def get_id(self) -> str:
        return self.__query_id

    def get_description(self) -> str:
        return self.__contact.public_name

    def get_thumbnail_url(self) -> str | None:
        if self.__contact.to_user.profile_photo_url is None:
            return
        return str(self.__contact.to_user.profile_photo_url)

    def get_title(self) -> str:
        return f'‚ùóÔ∏è –í—Å–µ –∫—Ä–æ–º–µ: {self.__contact.private_name}'

    def get_text(self) -> str:
        return (
            f'üì© –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö,'
            f' –∫—Ä–æ–º–µ <b>{self.__contact.public_name}</b>'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='üëÄ –ü—Ä–æ—á–∏—Ç–∞—Ç—å',
                        callback_data=(
                            InvertedSecretMessageDetailCallbackData(
                                contact_id=self.__contact.id,
                                secret_message_id=self.__secret_message_id.hex,
                            ).pack()
                        ),
                    )
                ]
            ]
        )


class SecretMessageDetailInlineQueryView(InlineQueryView):
    thumbnail_width = 100
    thumbnail_height = 100

    def __init__(
            self,
            query_id: str,
            contact: Contact,
            secret_message_id: UUID,
            secret_message_theme: SecretMessageTheme | None,
    ):
        self.__query_id = query_id
        self.__contact = contact
        self.__secret_message_id = secret_message_id
        self.__secret_message_theme = secret_message_theme

    def get_id(self) -> str:
        return self.__query_id

    def get_description(self) -> str:
        return self.__contact.public_name

    def get_thumbnail_url(self) -> str | None:
        if self.__contact.to_user.profile_photo_url is None:
            return
        return str(self.__contact.to_user.profile_photo_url)

    def get_title(self) -> str:
        return f'–ö–æ–Ω—Ç–∞–∫—Ç: {self.__contact.private_name}'

    def get_text(self) -> str:
        if self.__secret_message_theme is None:
            return (
                f'üì© –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è'
                f' <b>{self.__contact.public_name}</b>'
            )
        return (
            self.__secret_message_theme
            .description_template_text
            .format(name=self.__contact.public_name)
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        if self.__secret_message_theme is None:
            text = 'üëÄ –ü—Ä–æ—á–∏—Ç–∞—Ç—å'
        else:
            text = self.__secret_message_theme.button_text
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=text,
                        callback_data=SecretMessageDetailCallbackData(
                            secret_message_id=self.__secret_message_id,
                        ).pack()
                    ),
                ],
                [
                    InlineKeyboardButton(
                        text='‚ùå –£–¥–∞–ª–∏—Ç—å',
                        callback_data=SecretMessageDeleteCallbackData(
                            secret_message_id=self.__secret_message_id,
                        ).pack(),
                    )
                ],
            ]
        )


class SecretMessageTextMissingInlineQueryView(InlineQueryView):
    title = '–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ'
    text = (
        '–Ø —á–∞–π–Ω–∏–∫ ü´ñ\n'
        '–ü–æ–π–¥—É –∏–∑—É—á–∞—Ç—å <a href="https://graph.org/Kak-otpravit'
        '-sekretnoe-soobshchenie-08-14">–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é</a>'
    )
    thumbnail_url = 'https://i.imgur.com/e48C5cw.jpg'
    thumbnail_width = 100
    thumbnail_height = 100


class NotPremiumUserInlineQueryView(InlineQueryView):
    title = 'üåü –í—ã –Ω–µ –ø—Ä–µ–º–∏—É–º —é–∑–µ—Ä'
    text = (
        '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,'
        ' –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É.'
        ' –°—Ç–æ–∏—Ç –æ–Ω–∞ –≤—Å–µ–≥–æ –ª–∏—à—å 50 —Å–æ–º–æ–≤ –≤ –º–µ—Å—è—Ü.'
        ' –î–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ @usbtypec'
    )
    thumbnail_url = 'https://i.imgur.com/x9ruCcZ.jpg'
    thumbnail_width = 100
    thumbnail_height = 100


class TooLongSecretMessageTextInlineQueryView(InlineQueryView):
    title = '‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    text = '–Ø –≤–≤—ë–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòî'
    thumbnail_url = 'https://i.imgur.com/gMh8VXO.jpg'
    thumbnail_height = 100
    thumbnail_width = 100


class NoUserContactsInlineQueryView(InlineQueryView):
    title = '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üòî'
    text = '–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üòî'
    thumbnail_url = 'https://i.imgur.com/SfqYvom.jpeg'
    thumbnail_height = 100
    thumbnail_width = 100


class SecretMediaCreateContactListView(View):

    def __init__(self, contacts: Iterable[Contact]):
        self.__contacts = tuple(contacts)

    def get_text(self) -> str:
        return (
            '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞'
            if self.__contacts else '–£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ üòî'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=contact.private_name,
                        callback_data=str(contact.id),
                    ),
                ] for contact in self.__contacts
            ],
        )


class SecretMediaCreateConfirmView(View):

    def __init__(
            self,
            *,
            contact: Contact,
            media_type: SecretMediaType,
            description: str | None,
    ):
        self.__contact = contact
        self.__media_type = media_type
        self.__description = description

    def get_text(self) -> str:
        if self.__description is None:
            description = ''
        else:
            description = f'—Å –æ–ø–∏—Å–∞–Ω–∏–µ–º "{self.__description}" '
        return (
            f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'
            f' —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–¥–∏–∞ –¥–ª—è {description}{self.__contact.private_name}?'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                        callback_data='cancel',
                    ),
                    InlineKeyboardButton(
                        text='‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                        callback_data='confirm',
                    ),
                ],
            ],
        )


class SecretMediaDetailView(View):

    def __init__(self, secret_media: SecretMedia):
        self.__secret_media = secret_media

    def get_text(self) -> str:
        sender = (
                self.__secret_media.contact.of_user.username
                or self.__secret_media.contact.of_user.fullname
        )
        description = '' if self.__secret_media.name is None else (
            f'\n–û–ø–∏—Å–∞–Ω–∏–µ: "{self.__secret_media.name}"'
        )
        return (
            'üñºÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–¥–∏–∞ –¥–ª—è'
            f' <b>{self.__secret_media.contact.public_name}</b>\n'
            f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}'
            f'{description}'
        )


class SecretMediaForShareView(View):

    def __init__(
            self,
            *,
            bot_username: str,
            secret_media: SecretMedia,
            from_user_username: str,
    ):
        self.__bot_username = bot_username
        self.__secret_media = secret_media
        self.__from_user_username = from_user_username

    def get_text(self) -> str:
        return (
            'üñºÔ∏è –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–¥–∏–∞ –¥–ª—è'
            f' {self.__secret_media.contact.public_name}'
            f' –æ—Ç {self.__from_user_username}'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        url = (
            f'https://t.me/{self.__bot_username}'
            f'?start=secret_media-{self.__secret_media.id.hex}'
        )
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                        url=url,
                    ),
                ]
            ]
        )


class SecretMediaCalledInGroupChatView(View):
    text = f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–¥–∏–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ª–∏—á–∫—É –±–æ—Ç–∞'

    def __init__(self, bot_username: str):
        self.__bot_username = bot_username

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        url = f'https://t.me/{self.__bot_username}?start=secret_media'
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text=f'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–¥–∏–∞',
                        url=url,
                    ),
                ],
            ],
        )


class UserSettingsCalledInGroupChatView(View):
    text = '–ó–∞–π—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ –±–æ—Ç–∞'

    def __init__(self, bot_username: str):
        self.__bot_username = bot_username

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        url = f'https://t.me/{self.__bot_username}?start=settings'
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è',
                        url=url,
                    ),
                ],
            ],
        )


class SecretMessagePromptView(View):
    text = (
        '<a href="https://graph.org/Kak-otpravit-sekretnoe-soobshchenie-'
        '08-14">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a> –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'
    )
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
                    switch_inline_query_current_chat='',
                )
            ],
        ],
    )


class SecretMessageNotificationView(View):

    def __init__(self, *, secret_message_id: UUID, sender_full_name: str):
        self.__secret_message_id = secret_message_id
        self.__sender_full_name = sender_full_name

    def get_text(self) -> str:
        return (
            f'üì© –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å'
            f' –æ—Ç <b>{self.__sender_full_name}</b>'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        button = InlineKeyboardButton(
            text='üëÄ –ü—Ä–æ—á–∏—Ç–∞—Ç—å',
            callback_data=SecretMessageDetailCallbackData(
                secret_message_id=self.__secret_message_id,
            ).pack(),
        )
        return InlineKeyboardMarkup(inline_keyboard=[[button]])


class NoVisibleContactsInlineQueryView(InlineQueryView):
    title = '‚ùå –í—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–∫—Ä—ã—Ç—ã'
    description = (
        '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –≤–∏–¥–∏–º—ã–º–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç'
    )
    text = '–Ø —Å–∫—Ä—ã–ª –≤—Å–µ –º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üôÄ'
    thumbnail_url = 'https://i.imgur.com/zAHey9P.jpg'
    thumbnail_height = 100
    thumbnail_width = 100
