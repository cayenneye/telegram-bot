from collections.abc import Iterable

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, User

from callback_data import TagDeleteCallbackData
from enums import TagWeight
from models import Tag
from services.text import int_gaps
from services.tags import TAG_WEIGHT_TO_PRICE
from views import View

__all__ = ('TagGivenView', 'TagListView', 'TagDetailView')

TAG_WEIGHT_TO_EMOJI = {
    TagWeight.GOLD: 'ü•á',
    TagWeight.SILVER: 'ü•à',
    TagWeight.BRONZE: 'ü•â',
}


class TagGivenView(View):

    def __init__(self, to_user: User):
        self.__to_user = to_user

    def get_text(self) -> str:
        return f'‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.__to_user.mention_html()}'


class TagListView(View):

    def __init__(self, user: User, tags: Iterable[Tag]):
        self.__tags = tuple(tags)
        self.__user = user

    def get_text(self) -> str:
        if not self.__tags:
            return f'üèÜ –£ {self.__user.mention_html()} –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥'

        lines: list[str] = [f'<b>üèÜ –ù–∞–≥—Ä–∞–¥—ã {self.__user.mention_html()}:</b>']

        for tag_number, tag in enumerate(self.__tags, start=1):
            emoji = TAG_WEIGHT_TO_EMOJI[tag.weight]
            lines.append(
                f'{tag_number}. {emoji} {tag.text}'
            )

        total_price = sum(
            TAG_WEIGHT_TO_PRICE[tag.weight] for tag in self.__tags
        )
        lines.append(
            f'<b>üí∞  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å {int_gaps(total_price)} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤</b>'
        )

        lines.append(
            '\n‚ùì –ß—Ç–æ–±—ã –ª—É—á—à–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä–∞–¥—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
            '<code>–Ω–∞–≥—Ä–∞–¥–∞ {–Ω–æ–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã}</code>'
        )

        return '\n'.join(lines)


class TagDetailView(View):

    def __init__(self, tag: Tag, to_user: User):
        self.__tag = tag
        self.__to_user = to_user

    def get_text(self) -> str:
        from_user = self.__tag.of_user_username or self.__tag.of_user_fullname
        emoji = TAG_WEIGHT_TO_EMOJI[self.__tag.weight]
        return (
            f'üèÜ <b>–ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è {self.__to_user.mention_html()}</b>\n'
            f'–û—Ç: {from_user}\n'
            f'–¢–µ–∫—Å—Ç: {self.__tag.text}\n'
            f'{emoji} –°—Ç–∞—Ç—É—Å: {self.__tag.weight.name.lower()}\n'
            f'–í—ã–¥–∞–Ω–∞ {self.__tag.created_at:%d.%m.%Y %H:%M} (UTC)'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        button = InlineKeyboardButton(
            text='üí∞ –ü—Ä–æ–¥–∞—Ç—å',
            callback_data=TagDeleteCallbackData(
                tag_id=self.__tag.id,
                tag_weight=self.__tag.weight,
            ).pack(),
        )
        return InlineKeyboardMarkup(inline_keyboard=[[button]])
