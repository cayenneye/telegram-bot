from collections.abc import Iterable

from aiogram.types import InputMediaPhoto

from enums import Gender
from models import User
from services.dates import humanize_age
from services.manas_id import (
    compute_lifetime,
    determine_zodiac_sign,
    humanize_personality_type,
)
from views import MediaGroupView

__all__ = ('ProfileView',)


class ProfileView(MediaGroupView):

    def __init__(self, user: User, photos: Iterable[str]):
        self.__user = user
        self.__photos = tuple(photos)

    def get_caption(self) -> str:
        username = self.__user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'

        if born_on := self.__user.born_on is not None:
            age = humanize_age(born_on)
            humanized_birth_date = f'{born_on:%d.%m.%Y}'
            lifetime_in_days = compute_lifetime(born_on)
            zodiac_sign = determine_zodiac_sign(
                month=self.__user.born_on.month,
                day=self.__user.born_on.day,
            )
        else:
            age = '–Ω–µ —É–∫–∞–∑–∞–Ω'
            zodiac_sign = '–Ω–µ —É–∫–∞–∑–∞–Ω'
            humanized_birth_date = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            lifetime_in_days = '–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —Å–∫–æ–ª—å–∫–æ'

        gender_name = {
            Gender.MALE: '–º—É–∂—Å–∫–æ–π',
            Gender.FEMALE: '–∂–µ–Ω—Å–∫–∏–π',
            Gender.OTHER: '–¥—Ä—É–≥–æ–π',
        }.get(self.__user.gender, '–Ω–µ —É–∫–∞–∑–∞–Ω')

        if country := self.__user.country is not None:
            country = f'{self.__user.country_flag_emoji} {country}'
        else:
            country = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

        region = self.__user.region or '–Ω–µ —É–∫–∞–∑–∞–Ω'
        nationality = self.__user.nationality or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'

        personality_type = humanize_personality_type(
            personality_type=self.__user.personality_type,
        )

        return (
            f'<b>ü™™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n'
            f'ID: {self.__user.id}\n'
            f'–ò–º—è: {self.__user.fullname}\n'
            f'Username: @{username}\n'
            '\n'
            '<b>üì≤ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
            f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {humanized_birth_date} ({age})\n'
            f'–ü–æ–ª: {gender_name}\n'
            f'–°—Ç—Ä–∞–Ω–∞: {country}\n'
            f'–†–µ–≥–∏–æ–Ω: {region}\n'
            f'–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {nationality}\n'
            '\n'
            '<b>‚úèÔ∏è –ü—Ä–æ—á–µ–µ:</b>\n'
            f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}\n'
            f'–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {personality_type}\n'
            f'–ü—Ä–æ–∂–∏–ª –Ω–∞ –ó–µ–º–ª–µ: {lifetime_in_days} –¥–Ω–µ–π\n'
        )

    def get_medias(self) -> list[InputMediaPhoto]:
        return [
            InputMediaPhoto(media=photo_file_id)
            for photo_file_id in self.__photos
        ]
