from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from callback_data import (
    ContactCreateCallbackData,
    TagListCallbackData, UserBalanceDetailCallbackData,
)
from enums import Gender
from models import User
from services.dates import humanize_age
from services.manas_id import (
    compute_lifetime,
    determine_zodiac_sign,
    humanize_personality_type,
)
from services.text import render_units
from views import PhotoView

__all__ = ('ProfileView',)


class ProfileView(PhotoView):

    def __init__(self, user: User, photo: str):
        self.__user = user
        self.__photo = photo

    def get_caption(self) -> str:
        username = self.__user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'

        if (born_on := self.__user.born_on) is not None:
            age = humanize_age(born_on)
            humanized_birth_date = f'{born_on:%d.%m.%Y}'
            lifetime_in_days = compute_lifetime(born_on)
            zodiac_sign = determine_zodiac_sign(
                month=self.__user.born_on.month,
                day=self.__user.born_on.day,
            )
        else:
            age = '–Ω–µ —É–∫–∞–∑–∞–Ω'
            zodiac_sign = '–Ω–µ —É–∫–∞–∑–∞–Ω'
            humanized_birth_date = '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            lifetime_in_days = '–Ω–µ –ø–æ–Ω—è—Ç–Ω–æ —Å–∫–æ–ª—å–∫–æ'

        gender_name = {
            Gender.MALE: '–º—É–∂—Å–∫–æ–π',
            Gender.FEMALE: '–∂–µ–Ω—Å–∫–∏–π',
            Gender.OTHER: '–¥—Ä—É–≥–æ–π',
        }.get(self.__user.gender, '–Ω–µ —É–∫–∞–∑–∞–Ω')

        personality_type = humanize_personality_type(
            personality_type=self.__user.personality_type,
        )

        real_first_name = self.__user.real_first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        real_last_name = self.__user.real_last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        real_patronymic = self.__user.patronymic or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'

        if self.__user.is_premium:
            is_premium = f'üåü –î–∞'
        else:
            is_premium = '–ù–µ—Ç'

        return (
            f'<b>ü™™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n'
            f'ID: {self.__user.id}\n'
            f'–ò–º—è: {self.__user.fullname}\n'
            f'Username: @{username}\n'
            '\n'
            '<b>üì≤ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n'
            f'–ò–º—è: {real_first_name}\n'
            f'–§–∞–º–∏–ª–∏—è: {real_last_name}\n'
            f'–û—Ç—á–µ—Å—Ç–≤–æ: {real_patronymic}\n'
            f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {humanized_birth_date} ({age})\n'
            f'–ü–æ–ª: {gender_name}\n'
            '\n'
            '<b>‚úèÔ∏è –ü—Ä–æ—á–µ–µ:</b>\n'
            f'–ü—Ä–µ–º–∏—É–º: {is_premium}\n'
            f'–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞: {zodiac_sign}\n'
            f'–¢–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏: {personality_type}\n'
            f'–ü—Ä–æ–∂–∏–ª –Ω–∞ –ó–µ–º–ª–µ: {lifetime_in_days} –¥–Ω–µ–π\n'
            f'üîã –≠–Ω–µ—Ä–≥–∏—è: {render_units(self.__user.energy)}\n'
            f'‚ù§Ô∏è‚Äçü©π –ó–¥–æ—Ä–æ–≤—å–µ: {render_units(self.__user.health)}\n'
            '\n'
            'üì≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:'
            ' <a href="https://t.me/duck_duck_robot/menu">'
            '–Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å</a>'
        )

    def get_photo(self) -> str:
        return self.__photo

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        keyboard = InlineKeyboardBuilder()

        balance_button = InlineKeyboardButton(
            text='üí∞ –ë–∞–ª–∞–Ω—Å',
            callback_data=UserBalanceDetailCallbackData(
                user_id=self.__user.id,
            ).pack(),
        )
        tags_button = InlineKeyboardButton(
            text='üèÜ –ù–∞–≥—Ä–∞–¥—ã',
            callback_data=TagListCallbackData(
                user_id=self.__user.id,
                user_full_name=self.__user.fullname[:20],
            ).pack()
        )
        keyboard.row(balance_button, tags_button)

        if self.__user.can_be_added_to_contacts:
            contact_button = InlineKeyboardButton(
                text='üìû –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
                callback_data=ContactCreateCallbackData(
                    user_id=self.__user.id,
                ).pack(),
            )
            keyboard.row(contact_button)

        return keyboard.as_markup()
