from typing import Protocol

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, User

from callback_data import TransferRollbackCallbackData
from models import Transfer, UserBalance
from services.text import int_gaps
from views.base import View

__all__ = (
    'UserBalanceView',
    'WithdrawalNotificationView',
    'DepositNotificationView',
    'TransferAskForDescriptionView',
    'TransferConfirmView',
    'InsufficientFundsForSendingMediaView',
    'InsufficientFundsForHowYourBotView',
    'TransferExecutedView',
    'UserBalanceWithoutNameView',
)


class HasAmountAndDescription(Protocol):
    amount: int
    description: str | None


class UserBalanceView(View):
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='üí≥ –ö—É–ø–∏—Ç—å –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω—ã',
                    url='https://t.me/usbtypec',
                ),
            ],
        ],
    )

    def __init__(self, user_balance: UserBalance, user_fullname: str):
        self.__user_balance = user_balance
        self.__user_fullname = user_fullname

    def get_text(self) -> str:
        return (
            f'üôçüèø‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.__user_fullname}\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {int_gaps(self.__user_balance.balance)} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤'
        )


class WithdrawalNotificationView(View):
    disable_notification = True

    def __init__(self, withdrawal: HasAmountAndDescription):
        self.__withdrawal = withdrawal

    def get_text(self) -> str:
        lines = [
            f'üî• –°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–º–º—É'
            f' {int_gaps(self.__withdrawal.amount)} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤',
        ]
        if self.__withdrawal.description is not None:
            lines.append(f'‚Ñπ <i>{self.__withdrawal.description}</i>')
        return '\n'.join(lines)


class DepositNotificationView(View):

    def __init__(self, deposit: HasAmountAndDescription):
        self.__deposit = deposit

    def get_text(self) -> str:
        lines = [
            f'‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É'
            f' {int_gaps(self.__deposit.amount)} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤',
        ]
        if self.__deposit.description is not None:
            lines.append(f'‚Ñπ <i>{self.__deposit.description}</i>')
        return '\n'.join(lines)


class TransferAskForDescriptionView(View):
    text = 'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:'
    reply_markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                    callback_data='skip',
                ),
            ],
        ],
    )


class TransferConfirmView(View):

    def __init__(self, recipient_name, amount: int, description: str | None):
        self.__amount = amount
        self.__description = description
        self.__recipient_name = recipient_name

    def get_text(self) -> str:
        if self.__description is None:
            return (
                '‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥'
                f' –Ω–∞ —Å—É–º–º—É –≤ {int_gaps(self.__amount)}'
                f' –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç—É {self.__recipient_name}'
            )
        return (
            '‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥'
            f' –Ω–∞ —Å—É–º–º—É –≤ {int_gaps(self.__amount)}'
            f' –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç—É {self.__recipient_name}'
            f' —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º <i>{self.__description}</i>'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',
                        callback_data='cancel',
                    ),
                    InlineKeyboardButton(
                        text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                        callback_data='confirm',
                    ),
                ],
            ],
        )


class InsufficientFundsForSendingMediaView(View):
    disable_web_page_preview = True

    def __init__(self, user: User):
        self.__user = user

    def get_text(self) -> str:
        return (
            f'‚ùóÔ∏è <a href="{self.__user.url}">{self.__user.full_name}</a>'
            ' –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä/GIF/–≤–∏–¥–µ–æ'
            '\nüí∞ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å /balance'
        )


class InsufficientFundsForHowYourBotView(View):
    disable_web_page_preview = True

    def __init__(self, user: User):
        self.__user = user

    def get_text(self) -> str:
        return (
            f'‚ùóÔ∏è <a href="{self.__user.url}">{self.__user.full_name}</a>'
            ' –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @HowYourBot'
            '\nüí∞ –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å /balance'
        )


class TransferExecutedView(View):

    def __init__(self, transfer: Transfer):
        self.__transfer = transfer

    def get_text(self) -> str:
        return (
            '‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω\n'
            f'üí∞ –°—É–º–º–∞: {int_gaps(self.__transfer.amount)} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤\n'
            f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: {self.__transfer.description or "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n'
        )

    def get_reply_markup(self) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text='üîô –û—Ç–º–µ–Ω–∏—Ç—å',
                        callback_data=TransferRollbackCallbackData(
                            transfer_id=self.__transfer.id,
                        ).pack(),
                    ),
                ],
            ],
        )


class UserBalanceWithoutNameView(View):

    def __init__(self, balance: int):
        self.__balance = balance

    def get_text(self) -> str:
        return (
            f'–ë–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:'
            f' {int_gaps(self.__balance)} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤'
        )
