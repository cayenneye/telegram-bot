from datetime import timedelta

import humanize

from models import MinedResource, MiningUserStatistics
from views import View

__all__ = (
    'MinedResourceView',
    'MiningActionThrottledView',
    'MiningStatisticsView',
)


class MiningActionThrottledView(View):

    def __init__(self, next_mining_in_seconds: int):
        self.__next_mining_in_seconds = next_mining_in_seconds

    def get_text(self) -> str:
        next_mining = humanize.precisedelta(
            timedelta(seconds=self.__next_mining_in_seconds),
        )
        return f'‚ùå –°–ª–µ–¥—É—é—â–∞—è –¥–æ–±—ã—á–∞ —á–µ—Ä–µ–∑: {next_mining}'


class MinedResourceView(View):

    def __init__(self, mined_resource: MinedResource):
        self.__mined_resource = mined_resource

    def get_text(self) -> str:
        return (
            f'‚õèÔ∏è –í—ã –¥–æ–±—ã–ª–∏ —Ä–µ—Å—É—Ä—Å "{self.__mined_resource.resource_name}"'
            f' –Ω–∞ —Å—É–º–º—É {self.__mined_resource.wealth} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤!'
        )


class MiningStatisticsView(View):

    def __init__(self, mining_statistics: MiningUserStatistics):
        self.__mining_statistics = mining_statistics

    def get_text(self) -> str:
        if not self.__mining_statistics.resources:
            return (
                'üòî –í—ã –µ—â—ë –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω–∞ —à–∞—Ö—Ç–µ.\n'
                '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ <code>—à–∞—Ö—Ç–∞</code>'
                ' –∏–ª–∏ <code>–∫–æ–ø–∞—Ç—å</code>'
            )

        emojis = ('‚ñ™Ô∏è', '‚ñ´Ô∏è')
        lines: list[str] = ['<b>‚õèÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —à–∞—Ö—Ç—ã:</b>']
        for index, resource in enumerate(self.__mining_statistics.resources):
            emoji = emojis[index % 2]
            lines.append(
                f'{emoji} {resource.name} - {resource.total_count} —Ä–∞–∑ - {resource.total_wealth} –¥–∞–∫-–¥–∞–∫ –∫–æ–∏–Ω–æ–≤'
            )
        return '\n'.join(lines)
